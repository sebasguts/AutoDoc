<Chapter Label="Tutorials">
<Heading>Getting started using &AutoDoc;</Heading>

In this chapter we describe how &AutoDoc; can aide package authors in creating
and maintaing their package's documentation.

To this end, we will assume from now on that your package is called &SomePackage;.

<Section Label="Tut:Scratch">
<Heading>Creating a package manual from scratch</Heading>

Suppose your package is already up and running, but so far has no
manual. Then you can rapidly generate a scaffold for a manual using the
<Ref Func="AutoDoc"/> command like this:
<Listing>
LoadPackage("AutoDoc");
AutoDoc("SomePackage" : scaffold := true );
</Listing>
This creates two XML files <F>doc/SomePackage.xml</F> and
<F>doc/title.xml</F> insider the package directory and then runs
&GAPDoc; on them to produce a nice initial PDF and HTML version of your
fresh manual.
<P/>

To ensure that the &GAP; help system picks up your package manual, you
should also add the following (or a variation of it) to your
<F>PackageInfo.g</F>:
<Listing>
PackageDoc := rec(
  BookName  := ~.PackageName,
  ArchiveURLSubset := ["doc"],
  HTMLStart := "doc/chap0.html",
  PDFFile   := "doc/manual.pdf",
  SixFile   := "doc/manual.six",
  LongTitle := ~.Subtitle,
),
</Listing>

Congratulations, if you got this far, your package now has a minimal
working manual, which is integrated with the &GAP; help system. Of
course it will be mostly empty for now, but it already should contain
some useful information, based on the data in your <F>PackageInfo.g</F>.
This includes your packages's name, version and description as well as
information about its authors. And if you ever change the package data,
(e.g. because your email address changed) just re-run the above command
to regenerate the two main XML files with the latest information.
<P/>

Next of course you need to provide actual content (unfortunately, we were
not yet able to automate <E>that</E> for you, more research on artificial intelligence
is required).
To add more content, you have several options: You could add further &GAPDoc;
XML files containing extra chapters, sections and so on. Or you could use classic &GAPDoc;
source comments (in either case, see Section <Ref Sect="Tut:IntegrateExisting"/> on
how to teach the <Ref Func="AutoDoc"/> command to include this extra documentation).
Or you could use the special documentation facilities &AutoDoc; provides (see Section
<Ref Sect="Tut:AdvancedAutoDoc"/>).
<P/>

You may also wish to consult Section <Ref Sect="Tut:AutoRegenerate"/> for hints
on automatically re-generating your package manual when necessary.

</Section>


<Section Label="Tut:IntegrateExisting">
<Heading>Using &AutoDoc; in an existing &GAPDoc; manual</Heading>

TODO: Explain how one can use AutoDoc() just to regenerate the manual;
but also to regenerate the title.xml.

</Section>


<Section Label="Tut:AdvancedAutoDoc">
<Heading>Using &AutoDoc; to document your code</Heading>

To get one of your global functions, operations, attributes
etc. to appear in the package manual, simply insert an &AutoDoc; comment
of the form <C>#!</C> directly in front of it. For example:
<Listing>
#!
DeclareOperation( "ToricVariety", [ IsConvexObject ] );
</Listing>

In general, you should add some more information, such as in the following example:

<Listing><![CDATA[
#! @Arguments conv
#! @Returns a toric variety
#! @Description
#!  Creates a toric variety out
#!  of the convex object <A>conv</A>.
DeclareOperation( "ToricVariety", [ IsConvexObject ] );
]]></Listing>

For a full description of the capabilities of &AutoDoc;,
please refer to chapter <Ref Chap="TODO"/>. 

<!--
Once we switched AutoDoc itself to use AutoDoc comments,
mention that, i.e. point out that all operations and functions
documented in this manual are documented exactly like
described here, and that one can hence use that as examples.
-->

<!-- 

#  <#GAPDoc Label="ToricVarietyConst">
#  <ManSection>
#    <Oper Arg="conv" Name="ToricVariety"
#          Label="for IsConvexObject"/>
#    <Returns>a toric variety</Returns>
#    <Description>
#      Creates a toric variety out 
#      of the convex object <A>conv</A>.
#    </Description>
#  </ManSection>
#  <#/GAPDoc>
DeclareOperation( "ToricVariety",
                  [ IsConvexObject ] );
 -->

<P/>

TODO: Explain now how to combine this with AutoDoc(); namely by calling:
<Listing>
LoadPackage("AutoDoc");
# also add AutoDocMainFile.xml to your main .XML file
AutoDoc("SomePackage" : autodoc := true );

# or if you use scaffolding:
AutoDoc("SomePackage" : scaffold := true, autodoc := true );
</Listing>


<P/>


TODO: Explain how to mix this with existing &GAPDoc; XML files.


</Section>



<Section Label="Tut:AutoRegenerate">
<Heading>How to automate manual regeneration</Heading>

You will probably want to re-run the  <Ref Func="AutoDoc"/> command
frequently, e.g. whenever you modified your documentation or your
<F>PackageInfo.g</F>. To make this more convenient and reproducible, we
recommend putting its invocation into a file <F>makedoc.g</F> in your package
directory. Then you can regenerate the manual from the command line with the
following simple command (assuming you are in the package directory):
<Verb>
gap makedoc.g
</Verb>

</Section>

<Section Label="Tut:PackageInfo">
<Heading>What is taken from <F>PackageInfo.g</F></Heading>

TODO: Explain which information is extracted from <F>PackageInfo.g</F>.
This includes data from at least the following record components:
AutoDoc, Subtitle, Version, Date, Persons, PackageDoc.BookName

TODO: Perhaps PackageWWWHome could also be used (if set and non-empty)
at some point?

</Section>


<Section Label="Tut2">
<Heading>TODO: old section, revise</Heading>

Suppose the package &SomePackage; already has some documentation written using &GAPDoc;.
But from now on you want to get rid of always writing xml. Then you can use &AutoDoc; to write your new documentation parts.
All you need is to follow those simple steps, to include &AutoDoc; generated documentation in &SomePackage;'s already existing documentation.

 <List>
   <Item>
  Step 1:
    Declare the new objects with the <C>Declare*WithDocumentation</C> methods and add the descriptions like this:

<Verb>
DeclareCategoryWithDocumentation( "ACategory",
                                  IsObject,
                                  "A test.",
                                  [ "With_chapter_info", "Category_section" ] );
</Verb>
</Item>

  <Item>
  Step 2:
    Run the AutoDoc command with arguments &SomePackage; and the path of your documentation. If you want to,
    you can also enable &GAPDoc; in the command.
    
<Verb>
LoadPackage("AutoDoc");
AutoDoc( "SomePackage" : scaffold := true, autodoc := true );
</Verb>
</Item>

  <Item>
  Step 3:
    Step 2 should have created, among other files, a file named AutoDocMainFile.xml in your documentation folder. Include this file in your documentation via

<Verb>
#Include SYSTEM "AutoDocMainFile.xml"
</Verb>
</Item>

</List>

  Now you should have your &AutoDoc; created data in your documentation. Have fun with it.

</Section>
</Chapter>
